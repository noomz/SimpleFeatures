<?php
// $Id$

/**
 * @file
 */

define('DEFAULT_FEATURES_PATH', '/sites/all/simple_features');

/**
 * Implement hook_permission().
 */
function simple_features_permission() {
  return array(
    'turn on features' => array(
      'title' => 'turn on features',
      'description' => 'Choose which roles can use any features',
    ),
  );
}

/**
 * Implement hook_menu().
 */
function simple_features_menu() {
  $items = array();

  $items['admin/config/system/features'] = array(
    'title' => t('Features list'),
    'description' => t('Turn on or off site\'s features.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('simple_features_list_form'),
    'access arguments' => array('turn on features'),
    'file' => 'simple_features.admin.inc',
  );

  return $items;
}

/**
 * Load feature object.
 */
function simple_features_load_feature(string $feature_name) {
  $features = _load_features();
}

/**
 * Helper function to load all available features.
 */
function _load_features() {
  $features = array();
  $modules = db_query("SELECT * FROM {system} WHERE type = 'module'")->fetchAll();
  foreach ($modules as &$module) {
    $module->info = unserialize($module->info);
    if (@$module->info['parent'] == 'simple_features') {
      $features[$module->info['package']][] = $module;
    }
  }
    
  return $features;
}

class Feature {
  public $name, $info, $settings;

  function __construct($feature_name) {
    $this->name = $feature_name;
    $settings = db_query("
      SELECT name, value
        FROM {sf_settings}
        WHERE feature = :feature_name LIMIT 1",
      array(':feature_name' => $feature_name)
    )
    ->fetchAll();
    foreach ($settings as $value) {
      $this->settings[$value->name] = $value->value;
    }
  }

  function get_settings($key) {
    if (array_key_exists($key, $this->settings)) {
      return $this->settings[$key];
    }
    else {
      return FALSE;
    }
  }

  function save_settings() {
    if (empty($this->settings)) {
      return TRUE;
    }

    $txn = db_transaction();
    try {
      // Clear all old values.
      db_delete('sf_settings')
        ->condition('feature', $this->name)
        ->execute();

      // Begin insertion.
      $query = db_insert('sf_settings')
        ->fields(array('feature', 'name', 'value'));
      foreach ($this->settings as $name => $value) {
        $query->values(array(
          'feature' => $this->name,
          'name' => $name,
          'value' => $value,
        ));
      }
      $query->execute();
      return TRUE;
    }
    catch (Exception $e) {
      $txn->rollback();
      return False;
    }
  }
}
