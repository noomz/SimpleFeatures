<?php
// $Id$

/**
 * @file
 */

// TODO: Add function to restore feature to default settings.

/**
 * Implement hook_permission().
 */
function simple_features_permission() {
  return array(
    'turn on features' => array(
      'title' => 'turn on features',
      'description' => 'Choose which roles can use any features',
    ),
  );
}

/**
 * Implement hook_menu().
 */
function simple_features_menu() {
  $items = array();

  $items['admin/features'] = array(
    'title' => t('Features'),
    'description' => t('Turn on or off site\'s features.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('simple_features_list_form'),
    'access arguments' => array('turn on features'),
    'file' => 'simple_features.admin.inc',
  );

  $items['admin/features/list'] = array(
    'title' => t('List'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  return $items;
}


/**
 * Get features that corresponse to hook
 */
function _get_features_with_hook($features, $hook) {
  if (empty($features)) {
    $features = module_implements($hook);
  }
  else if (is_string($features)) {
    $features = array($features);
  }

  return $features;
}

/**
 * Set default variables.
 *
 * @param $features Array()
 *   array of features.
 * @param $reset
 *   if TRUE, reset variables to default
 */
function simple_features_set_default_variables($features = array(), $reset = FALSE) {
  $features = _get_features_with_hook($features, 'sf_default_variables');

  foreach ($features as $feature) {
    $variables = module_invoke($feature, 'sf_default_variables');
    if (!is_array($variables)) {
      continue;
    }
    foreach ($variables as $key => $value) {
      if ($reset || variable_get($key, '') == '') {
        variable_set($key, $value);
      }
    }
  }
}

/**
 * Hook sf_block_settings.
 */
function simple_features_set_block_settings($features = array(), $reset = FALSE) {
  $features = _get_features_with_hook($features, 'sf_block_settings');

  foreach ($features as $feature) {
    $variables = module_invoke($feature, 'sf_block_settings');
    if (empty($variables)) {
      continue;
    }

    foreach ($variables as $key => $value) {
      $q = db_merge('block')
        ->key(array(
          'module' => $value['module'],
          'delta' => $value['delta'],
          'theme' => $value['theme'],
        ))
        ->fields($value);
      if ($reset) {
        $q->update($value);
      }
      $q->execute();
    }
  }
}

/**
 * Hook sf_default_permissions().
 * Set default permission provided by each feature.
 */
function simple_features_set_default_permissions($features = array(), $reset = FALSE) {
  $features = _get_features_with_hook($features, 'sf_default_permissions');

  foreach ($features as $feature) {
    $perms = module_invoke($feature, 'sf_default_permissions');
    foreach ($perms as $role => $perm) {
      $query = db_query("SELECT rid FROM {role} WHERE name = :name", array(':name' => $role));
      $rid = array_pop($query->fetchCol());
      user_role_change_permissions($rid, $perm);
    }
  }
}

/**
 * Hook sf_sample_contents().
 * Setup some sample content.
 */
function simple_features_set_sample_contents($features = array(), $reset = FALSE) {
  $features = _get_features_with_hook($features, 'sf_sample_contents');

  global $user;
  $node_default = array(
    'uid' => $user->uid,
    'name' => $user->name,
    'language' => 'und',
    'comment' => 1,
    'status' => 1,
    'sticky' => 0,
    'translate' => 0,
  );

  foreach ($features as $feature) {
    $nodes = module_invoke($feature, 'sf_sample_contents');
    // If feature has already add the example.
    if (variable_get('was_added_example_'. $feature, FALSE)) {
      continue;
    }
    foreach ($nodes as $node) {
      if (empty($node['#saved'])) {
        $node = array_merge($node_default, $node);
        node_save((object)$node);
      }
    }
    // Mark this feature make the example.
    variable_set('was_added_example_'. $feature, TRUE);
  }
}

/**
 * Helper function to disable features.
 */
function simple_features_disable_features($disabled, $clear_cache=TRUE) {
  // Prevent itself to be disabled.
  unset($disabled[array_search('simple_features', $disabled)]);
  module_disable($disabled);

  // Clear all cache before insert contents or settings variables.
  if ($clear_cache) {
    // Clear all caches.
    registry_rebuild();
    drupal_theme_rebuild();
    node_types_rebuild();
    menu_rebuild();
    cache_clear_all('schema', 'cache');
    entity_info_cache_clear();
    drupal_clear_css_cache();
    drupal_clear_js_cache();
  }
}

/**
 * Helper function to enable features.
 */
function simple_features_enable_features($enabled, $clear_cache=TRUE) {
  module_enable($enabled);
  foreach ($enabled as $module) {
    if (drupal_get_installed_schema_version($module, TRUE) == SCHEMA_UNINSTALLED) {
      drupal_install_schema($module);
      // Allow the module to perform install tasks.
      module_invoke($module, 'install');
      $versions = drupal_get_schema_versions($module);
      drupal_set_installed_schema_version($module, $versions ? max($versions) : SCHEMA_INSTALLED);
      // Record the fact that it was installed.
      $modules_installed[] = $module;
      watchdog('system', '%module module installed.', array('%module' => $module), WATCHDOG_INFO);
    }
  }

  // Clear all cache before insert contents or settings variables.
  // TODO: Refactor
  if ($clear_cache) {
    // Clear all caches.
    registry_rebuild();
    drupal_theme_rebuild();
    node_types_rebuild();
    menu_rebuild();
    cache_clear_all('schema', 'cache');
    entity_info_cache_clear();
    drupal_clear_css_cache();
    drupal_clear_js_cache();
  }

  simple_features_set_default_variables($enabled);
  simple_features_set_sample_contents($enabled);
  simple_features_set_block_settings($enabled, TRUE);
  // Update block DB table.
  drupal_theme_initialize();
  _block_rehash();
  // Premission setting must be the last method, it'll rebuild permission
  simple_features_set_default_permissions($enabled);
}

/**
 * Safe transaction wrapper.
 */
function _txn($func_name) {
  $args = func_get_args();
  array_shift($args);

  $txn = db_transaction();
  try {
    $result = call_user_func_array($func_name, $args);
    return $result;
  }
  catch (Exception $e) {
    $txn->rollback();
    drupal_set_message('An error occurs, please check and try again', 'error');
    return FALSE;
  }
}

/**
 * Implements hook_theme().
 */
function simple_features_theme($existing, $type, $theme, $path) {
  return array(
    'simple_features_checkbox_element' => array(
      'render element' => 'element',
      'file' => 'simple_features.admin.inc',
    ),
    'simple_features_preview_image' => array(
      'variables' => array('path' => NULL, 'width' => 194, 'height' => 144),
      'file' => 'simple_features.admin.inc',
    ),
    'simple_features_price' => array(
      'variables' => array('price' => NULL),
      'file' => 'simple_features.admin.inc',
    ),
    'simple_features_sample_links' => array(
      'variables' => array('links' => array()),
      'file' => 'simple_features.admin.inc',
    ),
  );
}

/**
 * Implements hook_image_default_style().
 */
function simple_features_image_default_styles() {
  $styles['simple_features_preview'] = array(
    'effects' => array(
      array(
        'name' => 'image_scale_and_crop',
        'data' => array('width' => 294, 'height' => 219),
        'weight' => 0,
      ),
    ),
  );

  return $styles;
}
