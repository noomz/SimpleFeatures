<?php
// $Id$

/**
 * @file
 */

define('DEFAULT_FEATURES_PATH', '/sites/all/simple_features');

/**
 * Implement hook_permission().
 */
function simple_features_permission() {
  return array(
    'turn on features' => array(
      'title' => 'turn on features',
      'description' => 'Choose which roles can use any features',
    ),
  );
}

/**
 * Implement hook_menu().
 */
function simple_features_menu() {
  $items = array();

  $items['admin/features'] = array(
    'title' => t('Features'),
    'description' => t('Turn on or off site\'s features.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('simple_features_list_form'),
    'access arguments' => array('turn on features'),
    'file' => 'simple_features.admin.inc',
  );

  $items['admin/features/list'] = array(
    'title' => t('List'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  return $items;
}

/**
 * Load feature object.
 */
function simple_features_load_feature(string $feature_name) {
  $features = Feature::getInfoAll();
}

class Feature {

  public $name;
  public $status;
  public $info;
  public $settings;

  function __construct($feature_name) {
    $this->name = $feature_name;
    $this->info = Feature::getInfo($feature_name);
    $this->status = $this->info->status;
    $settings = db_query("
      SELECT name, value
        FROM {sf_settings}
        WHERE feature = :feature_name LIMIT 1",
      array(':feature_name' => $feature_name)
    )
    ->fetchAll();
    // Make default empty settings as array.
    $this->settings = array();
    foreach ($settings as $value) {
      $this->settings[$value->name] = $value->value;
    }
  }

  /**
   * Return settings value or empty string if not exist.
   */
  function get_settings($key) {
    if (array_key_exists($key, $this->settings)) {
      return $this->settings[$key];
    }
    else {
      return FALSE;
    }
  }

  /**
   * Save settings values to database.
   */
  function save_settings() {
    if (empty($this->settings)) {
      return TRUE;
    }

    // As db_merge will be supported multiple values in drupal 8,
    // we need to delete all old settings before inserting new values.
    // By using db_insert multiple values method, I don't sure if it
    // increase preformance or not. (May be this help when values to
    // save is more than 100)
    // TODO: revise the method again.
    $txn = db_transaction();
    try {
      // Clear all old values.
      db_delete('sf_settings')
        ->condition('feature', $this->name)
        ->execute();

      // Begin insertion.
      $query = db_insert('sf_settings')
        ->fields(array('feature', 'name', 'value'));
      foreach ($this->settings as $name => $value) {
        $query->values(array(
          'feature' => $this->name,
          'name' => $name,
          'value' => $value,
        ));
      }
      $query->execute();
      return TRUE;
    }
    catch (Exception $e) {
      $txn->rollback();
      return False;
    }
  }

  /**
   * Helper function to load all available features.
   */
  public static function getInfoAll($group = TRUE) {
    $features = array();
    $modules = db_query("SELECT * FROM {system} WHERE type = 'module'")->fetchAll();
    foreach ($modules as &$module) {
      $module->info = unserialize($module->info);
      if (@$module->info['parent'] == 'simple_features') {
        if ($group) {
          $features[$module->info['package']][] = $module;
        }
        else {
          $features[$module->name] = $module;
        }
      }
    }
      
    return $features;
  }

  /**
   * Wrapper function to load only wanted feature.
   */
  public static function getInfo($feature_name) {
    $features = Feature::getInfoAll(FALSE);
    if (array_key_exists($feature_name, $features)) {
      return $features[$feature_name];
    }
    else {
      return FALSE;
    }
  }

}

/**
 * Set default variables.
 */
function simple_features_set_default_variables($features = array(), $reset = FALSE) {
  if (empty($features)) {
    $variables = module_invoke_all('sf_default_variables');
  }
  else if (is_string($features)) {
    $features = array($features);
  }

  foreach ($features as $feature) {
    $variables = module_invoke($feature, 'sf_default_variables');
    if (!is_array($variables)) {
      continue;
    }
    foreach ($variables as $key => $value) {
      if ($reset || variable_get($key, '') == '') {
        variable_set($key, $value);
      }
    }
  }
}

/**
 * Hook sf_block_settings.
 */
function simple_features_set_block_settings($features = array(), $reset = FALSE) {
  if (empty($features)) {
    $variables = module_invoke_all('sf_block_settings');
  }
  else if (is_string($features)) {
    $features = array($features);
  }

  foreach ($features as $feature) {
    $variables = module_invoke($feature, 'sf_block_settings');
    if (empty($variables)) {
      continue;
    }
    // TODO: Refactor
    foreach ($variables as $key => $value) {
      $q = db_merge('block')
        ->key(array(
          'module' => $value['module'],
          'delta' => $value['delta'],
        ))
        ->fields($value);
      if ($reset) {
        $q->update($value);
      }
      $q->execute();
    }
  }
}

/**
 * Helper function to disable features.
 */
function simple_features_disable_features($disabled) {
  // Prevent itself to be disabled.
  unset($disabled[array_search('simple_features', $disabled)]);
  module_disable($disabled);
}

/**
 * Helper function to enable features.
 */
function simple_features_enable_features($enabled) {
  module_enable($enabled);
  simple_features_set_default_variables($enabled);
  simple_features_set_block_settings($enabled, TRUE);
}

/**
 * Safe transaction wrapper.
 */
function _txn($func_name) {
  $args = func_get_args();
  array_shift($args);

  $txn = db_transaction();
  try {
    $result = call_user_func_array($func_name, $args);
    return $result;
  }
  catch (Exception $e) {
    $txn->rollback();
    drupal_set_message('An error occurs, please check and try again', 'error');
    return FALSE;
  }
}
