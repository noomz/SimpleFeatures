<?php
// $Id$

/**
 * @file
 */

// TODO: Add function to restore feature to default settings.

/**
 * Implement hook_permission().
 */
function simple_features_permission() {
  return array(
    'turn on features' => array(
      'title' => 'turn on features',
      'description' => 'Choose which roles can use any features',
    ),
  );
}

/**
 * Implement hook_menu().
 */
function simple_features_menu() {
  $items = array();

  $items['admin/features'] = array(
    'title' => t('Features'),
    'description' => t('Turn on or off site\'s features.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('simple_features_list_form'),
    'access arguments' => array('turn on features'),
    'file' => 'simple_features.admin.inc',
  );

  $items['admin/features/list'] = array(
    'title' => t('List'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  return $items;
}

/**
 * Set default variables.
 *
 * @param $features Array()
 *   array of features.
 * @param $reset
 *   if TRUE, reset variables to default
 */
function simple_features_set_default_variables($features = array(), $reset = FALSE) {
  if (empty($features)) {
    $variables = module_invoke_all('sf_default_variables');
  }
  else if (is_string($features)) {
    $features = array($features);
  }

  foreach ($features as $feature) {
    $variables = module_invoke($feature, 'sf_default_variables');
    if (!is_array($variables)) {
      continue;
    }
    foreach ($variables as $key => $value) {
      if ($reset || variable_get($key, '') == '') {
        variable_set($key, $value);
      }
    }
  }
}

/**
 * Hook sf_block_settings.
 */
function simple_features_set_block_settings($features = array(), $reset = FALSE) {
  if (empty($features)) {
    $variables = module_invoke_all('sf_block_settings');
  }
  else if (is_string($features)) {
    $features = array($features);
  }

  foreach ($features as $feature) {
    $variables = module_invoke($feature, 'sf_block_settings');
    if (empty($variables)) {
      continue;
    }

    foreach ($variables as $key => $value) {
      $q = db_merge('block')
        ->key(array(
          'module' => $value['module'],
          'delta' => $value['delta'],
        ))
        ->fields($value);
      if ($reset) {
        $q->update($value);
      }
      $q->execute();
    }
  }
}

/**
 * Helper function to disable features.
 */
function simple_features_disable_features($disabled) {
  // Prevent itself to be disabled.
  unset($disabled[array_search('simple_features', $disabled)]);
  module_disable($disabled);
}

/**
 * Helper function to enable features.
 */
function simple_features_enable_features($enabled) {
  module_enable($enabled);
  simple_features_set_default_variables($enabled);
  simple_features_set_block_settings($enabled, TRUE);
}

/**
 * Safe transaction wrapper.
 */
function _txn($func_name) {
  $args = func_get_args();
  array_shift($args);

  $txn = db_transaction();
  try {
    $result = call_user_func_array($func_name, $args);
    return $result;
  }
  catch (Exception $e) {
    $txn->rollback();
    drupal_set_message('An error occurs, please check and try again', 'error');
    return FALSE;
  }
}

/**
 * Implements hook_theme().
 */
function simple_features_theme($existing, $type, $theme, $path) {
  return array(
    'simple_features_checkbox_element' => array(
      'render element' => 'element',
      'file' => 'simple_features.admin.inc',
    ),
    'simple_features_preview_image' => array(
      'variables' => array('path' => NULL, 'width' => 194, 'height' => 144),
      'file' => 'simple_features.admin.inc',
    ),
    'simple_features_price' => array(
      'variables' => array('price' => NULL),
      'file' => 'simple_features.admin.inc',
    ),
  );
}

/**
 * Implements hook_image_default_style().
 */
function simple_features_image_default_styles() {
  $styles['simple_features_preview'] = array(
    'effects' => array(
      array(
        'name' => 'image_scale_and_crop',
        'data' => array('width' => 294, 'height' => 219),
        'weight' => 0,
      ),
    ),
  );

  return $styles;
}
